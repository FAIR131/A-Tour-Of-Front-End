一、模板语法和指令
    1、模板语法:使用双花括号(mustache)表达式,用于取状态数据,以及其他的表达式运算
    2、v-text,v-html,v-pre,v-once,v-show,v-if,v-else-if,v-else,v-bind(:)和修饰符,v-on(@)和修饰符,v-model,v-for
    3、自定义指令:全局指令和局部指令

二、组件(component)
    1、组件是一个html,css,js的聚合体
        1)、封装一个特定的功能,与外部环境隔离
        2)、先创建,再引入并注册,后使用
        3)、可以多处、重复使用

    2、生命周期
        1)、beforeCreate:数据函数等都还没有被创建(执行1次)
        2)、created:数据函数等已经创建完成(执行1次)
        3)、beforeMount:页面还没有挂载,dom节点中都是表达式(执行1次)
        4)、mounted:页面已经挂载,数据已经更新,页面首次渲染完成,一般在此处发送网络请求等初始化操作(执行1次)
        5)、beforeUpdate:在数据更新后,页面更新前触发(执行N次)
        6)、updated:数据和页面都已经更新(执行N次)
        7)、beforeDestroy:在实例销毁前触发,此时页面还是正常的
        8)、destroyed:在实例销毁后触发,数据方法都还在,页面已经不更新了
        9)、activated
        10)、deactivated
        11)、errorCaptured
    3、数据项(data)
        1)、是一个函数,返回一个对象,对象中的属性会直接挂载到实例上,在页面直接取用。
        2)、数据更新时,页面也会同步更新。
    4、计算属性(computed)
        1)、是属性,数据会直接挂在实例上,值通过一个函数返回值获得,会被缓存起来。
        2)、如果计算的依赖没有发生变化,每次取值都从缓存中取,不会重新计算。
        3)、名称不能与其他数据项重名。
    5、侦听器(watch)
        1)、可以侦听实例上的数据项,当数据项的值改变时,会侦听到。
        2)、绑定的函数有两个参数,一个是新值,一个是老值。
        3)、深度侦听:当侦听的数据是复杂类型时,可以借助计算属性进行深度侦听。
    6、过滤器(filter)
        1)、过滤器可以对传过来的数据进行再加工,不会改变原数据。
        2)、使用时通过竖线分割,只能在模板语法或标签属性中使用
        3)、局部过滤器和全局过滤器
    7、混入(mixins)
        1)、混入就是把一些可以重用的数据或方法分发给需要的组件
        2)、在组件中通过mixins数组接收
        3)、全局混入和局部混入
    8、组件传值方式
        1)、父子组件传值:父组件通过自定义属性传值,子组件通过props接收。子组件通过$emit触发父组件声明的自定义事件传值
        2)、事件总线:通过一个空的vue实例,调用实例上的$on声明自定义事件,$emit触发自定义事件,不受组件关系影响
        3)、ref引用:可以给标签或子组件加上这个属性,进而通过$refs获取引用。
        4)、provide/inject:嵌套组件传值,通过provide属性可以向后代组件暴露数据或方法,后代组件可以通过inject注入,注入的值直接挂载实例上。
        5)、$root/$parent/$children:$root是vue实例,$parent是当前组件的父组件实例,$children是子组件实例集合
        6)、$attrs/$listeners:$attrs是父组件传过来的自定义属性(props声明的除外),$listeners是父组件声明的自定义事件
    9、插槽(slot)
        1)、单个(默认)插槽,在模板中用<slot>标签声明插槽位置,在组件使用时,双标签里面的内容会被放入插槽
        2)、具名插槽,当模板中不止一个插槽时,通过命名name区分,使用时用v-slot(#)指定插入哪个插槽
        3)、作用域插槽,当插槽需要在使用时传值,可以在slot上写自定义属性,在组件中通过<template>声明作用域变量
    10、内置组件
        1)、动态组件:<component>,通过is属性控制渲染哪个组件
        2)、缓存组件:<keep-alive>,将包裹的组件缓存起来,使用时取出,隐藏时也不会销毁
        3)、过渡组件:<transition>,给组件切换时加上过渡效果。name声明css名称,mode设置过渡方式

三、路由(router)
    1、路由就是url与资源的对应关系
    2、使用方法:安装路由(注意版本),引入并挂载,创建路由实例,将路由实例挂到vue实例中,在页面设置路由显示出口
    3、声明式导航:<router-link>,通过to属性指定跳转路径,被激活的菜单还有router-link-active样式
    4、编程式导航
        1)、通过路由对象$router中的push,replace,go方法进行跳转
        2)、query传参:参数值通过$router中的currentRoute取query属性
        3)、动态url传参:参数值通过$router中的currentRoute取params属性
    5、重定向和404:通过redirect设置路由重定向,通过通配符*解决404问题
    6、命名路由:在路由规则中,添加一个name属性,给路由取别名
    7、路由守卫:(beforeRouteLeave)->beforeEach->(局部守卫beforeEnter->(组件内守卫beforeRouteEnter,beforeRouteUpdate))->beforeResolve->afterEach
    8、路由懒加载:将路由中的component改写为函数形式,打包时不会打成一个文件,从而提升页面首次渲染速度

四、状态管理(vuex)
    1、将那些多页面需要共享并操作的数据进行单独管理
    2、使用方法:安装vuex(注意版本),引入并挂载,创建实例,将vuex实例挂在vue实例上
    3、配置项
        1)、state:单一状态树,只有这一个对象,管理所有状态数据
        2)、mutations:直接修改state的值,不能执行异步操作,通过commit方法触发
        3)、actions:可以执行异步操作,不能直接修改state的值,通过dispatch方法触发
        4)、getters:获取state数据,类似于计算属性,通过getters属性获取
        5)、modules:子模块,用于多数据开发时避免耦合或冲突,将数据和方法进行隔离,互不干扰(开启namespaced)。
    4、辅助函数
        1)、mapState:写在computed里面,将state数据直接映射到实例上
        2)、mapMutations:写在methods里面,将mutations函数直接映射到实例上
        3)、mapActions:与mapMutations用法一致
        4)、mapGetters